name: Secrets Compatibility Check

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
      RPC_URL_PRIMARY:  ${{ secrets.RPC_URL_PRIMARY }}
      RPC_URL_ALCHEMY:  ${{ secrets.RPC_URL_ALCHEMY }}
      RPC_URL_INFURA:   ${{ secrets.RPC_URL_INFURA }}
      HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
      HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
      HOSTINGER_SSH_KEY:  ${{ secrets.HOSTINGER_SSH_KEY }}
      NEXT_PUBLIC_GATEWAY_URL: ${{ secrets.NEXT_PUBLIC_GATEWAY_URL }}
      PINATA_JWT: ${{ secrets.PINATA_JWT }}
    steps:
      - name: Print present/absent matrix
        run: |
          check() { local n="$1"; local v="${!1}"; if [ -n "$v" ]; then echo "✅ $n: set"; else echo "⚠️  $n: not set"; fi }
          check ETHERSCAN_API_KEY
          check BASESCAN_API_KEY
          check RPC_URL_PRIMARY
          check RPC_URL_ALCHEMY
          check RPC_URL_INFURA
          check HOSTINGER_SSH_HOST
          check HOSTINGER_SSH_USER
          if [ -n "$HOSTINGER_SSH_KEY" ]; then echo "✅ HOSTINGER_SSH_KEY: set (hidden)"; else echo "⚠️  HOSTINGER_SSH_KEY: not set"; fi
          check NEXT_PUBLIC_GATEWAY_URL
          check PINATA_JWT

      - name: Recommend deprecation notices
        run: |
          if [ -n "$BASESCAN_API_KEY" ] && [ -z "$ETHERSCAN_API_KEY" ]; then
            echo "⚠️  BASESCAN_API_KEY is set but ETHERSCAN_API_KEY is not. Please migrate to ETHERSCAN_API_KEY."; exit 1;
          fi
          echo "✅ Naming compatibility looks good"

      - name: RPC sanity checks
        run: |
          set -e
          endpoints=()
          [ -n "$RPC_URL_PRIMARY" ] && endpoints+=("$RPC_URL_PRIMARY")
          [ -n "$RPC_URL_ALCHEMY" ] && endpoints+=("$RPC_URL_ALCHEMY")
          [ -n "$RPC_URL_INFURA" ] && endpoints+=("$RPC_URL_INFURA")
          endpoints+=("https://mainnet.base.org")
          echo "Testing RPC endpoints (in order):"; printf ' - %s\n' "${endpoints[@]}"
          ok=0
          for RPC in "${endpoints[@]}"; do
            echo "Testing RPC: $RPC"
            resp=$(curl -s -X POST "$RPC" -H 'Content-Type: application/json' -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' --max-time 20)
            if echo "$resp" | grep -q '"result"'; then
              echo "✅ RPC check passed on: $RPC"
              ok=1; break
            else
              echo "⚠️  RPC check failed on: $RPC"
              echo "Response: $resp"
            fi
          done
          if [ "$ok" -ne 1 ]; then
            echo "❌ All RPC checks failed"; exit 1;
          fi

      - name: SSH key shape check (Hostinger)
        run: |
          if [ -n "$HOSTINGER_SSH_KEY" ]; then
            echo "$HOSTINGER_SSH_KEY" | grep -q "BEGIN OPENSSH PRIVATE KEY" || echo "ℹ️ HOSTINGER_SSH_KEY present but not OpenSSH format (may be fine if using PEM)"
            echo "✅ HOSTINGER_SSH_KEY present"
          else
            echo "⚠️  HOSTINGER_SSH_KEY not present"
          fi

      - name: Pinata gateway sanity
        run: |
          if [ -n "$NEXT_PUBLIC_GATEWAY_URL" ]; then echo "✅ NEXT_PUBLIC_GATEWAY_URL set"; else echo "ℹ️ No gateway configured (optional)"; fi
          if [ -n "$PINATA_JWT" ]; then echo "✅ PINATA_JWT set"; else echo "ℹ️ No PINATA_JWT configured (optional)"; fi

