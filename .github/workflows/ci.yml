name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build-test-verify:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
    env:
      ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      RPC_URL_PRIMARY: ${{ secrets.RPC_URL_PRIMARY }}
      RPC_URL_ALCHEMY: ${{ secrets.RPC_URL_ALCHEMY }}
      RPC_URL_INFURA: ${{ secrets.RPC_URL_INFURA }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Verify Foundry Installation
        run: |
          cast --version
          forge --version

      - name: RPC health check
        env:
          RPC_URL: ${{ env.RPC_URL_PRIMARY }}
        run: |
          echo "Testing RPC connectivity..."
          if [ -z "$RPC_URL" ]; then
            echo "⚠️ RPC_URL_PRIMARY secret not set - using fallback"
            RPC_URL="https://mainnet.base.org"
            echo "Using fallback RPC: $RPC_URL"
          fi
          echo "Testing RPC: $RPC_URL"
          response=$(curl -s -X POST "$RPC_URL" \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
            --max-time 30 \
            --retry 3 \
            --retry-delay 2 || echo "curl failed")
          if echo "$response" | grep -q '"result"'; then
            block_number=$(echo "$response" | jq -r '.result' 2>/dev/null || echo "unknown")
            echo "✅ RPC health check passed"
            echo "Block number: $block_number"
          else
            echo "⚠️ RPC health check failed (non-blocking)"
            echo "Response: $response"
            echo "Continuing with workflow..."
          fi
          export PATH="$PATH:$HOME/.foundry/bin"
          echo "Testing with cast..."
          cast rpc --rpc-url "$RPC_URL" eth_chainId || echo "Cast chainId check failed"
          cast rpc --rpc-url "$RPC_URL" eth_blockNumber || echo "Cast blockNumber check failed"

      - name: Chaos test (RPC failover)
        continue-on-error: true
        env:
          RPC_URL: ${{ env.RPC_URL_ALCHEMY }}
        run: |
          export PATH="$PATH:$HOME/.foundry/bin"
          if [ -n "$RPC_URL" ]; then
            cast rpc --rpc-url "$RPC_URL" eth_blockNumber || true
          else
            echo "RPC_URL_ALCHEMY not set; skipping"
          fi

      - name: Compile
        run: npx hardhat compile

      - name: Test
        run: npx hardhat test --network hardhat

      - name: Security audit
        run: |
          npm audit --omit=dev
          if [ $? -ne 0 ]; then
            echo "Security audit failed - high severity vulnerabilities found"
            exit 1
          fi

      - name: Generate SBOM
        run: |
          npm install @cyclonedx/cyclonedx-npm --no-save
          npx @cyclonedx/cyclonedx-npm --output-file sbom.json

      - name: Upload audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audit
          path: audit/
          retention-days: 180

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          retention-days: 180

      - name: Verify vesting (Base)
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          RPC_URL_PRIMARY: ${{ env.RPC_URL_PRIMARY }}
        run: npx hardhat run scripts/verifyAndAudit.cjs --network base

      - name: Discord notification (success)
        if: ${{ env.DISCORD_WEBHOOK_URL != '' }}
        run: |
          curl -H 'Content-Type: application/json' \
            -d "{\"content\":\"✅ CI workflow succeeded: ${GITHUB_RUN_NUMBER} - ${GITHUB_SHA}\"}" \
            "$DISCORD_WEBHOOK_URL"

      - name: Slack notification (success)
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        run: |
          curl -X POST -H 'Content-Type: application/json' \
            -d "{\"text\":\"✅ CI workflow succeeded: ${GITHUB_RUN_NUMBER} - ${GITHUB_SHA}\"}" \
            "$SLACK_WEBHOOK_URL"