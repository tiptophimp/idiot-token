name: Deploy Website

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify secrets exist
      run: |
        echo "Checking secrets configuration..."
        if [ -z "$SSH_KEY" ]; then
          echo "❌ IDIOT_SSH_PRIVATE_KEY is not set"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_IP }}" ]; then
          echo "❌ SERVER_IP is not set"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_USER }}" ]; then
          echo "❌ SERVER_USER is not set"
          exit 1
        fi
        echo "✅ All secrets configured"
      env:
        SSH_KEY: ${{ secrets.IDIOT_SSH_PRIVATE_KEY }}
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Add server to known hosts
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null
        
        # Test SSH key format
        ssh-keygen -l -f ~/.ssh/deploy_key || {
          echo "❌ Invalid SSH key format!"
          echo "The key should start with: -----BEGIN OPENSSH PRIVATE KEY-----"
          echo "And end with: -----END OPENSSH PRIVATE KEY-----"
          exit 1
        }
        
        echo "✅ SSH key is valid"
      env:
        SSH_PRIVATE_KEY: ${{ secrets.IDIOT_SSH_PRIVATE_KEY }}
        
    - name: Test SSH connection
      run: |
        echo "Testing connection to ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}..."
        ssh -i ~/.ssh/deploy_key \
          -o ConnectTimeout=10 \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
          "echo '✅ SSH connection successful!' && uname -a"
        
    - name: Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        tar -czf /tmp/deployment.tar.gz \
          --exclude='.git' \
          --exclude='*.log' \
          --exclude='node_modules' \
          --exclude='secure' \
          --exclude='*.pem' \
          --exclude='*password*' \
          --exclude='*.csv' \
          --exclude='*.xlsx' \
          --exclude='audit-log.zip' \
          .
        
        mv /tmp/deployment.tar.gz ./deployment.tar.gz
        SIZE=$(du -h deployment.tar.gz | cut -f1)
        echo "✅ Package created: $SIZE"
        
    - name: Upload to server
      run: |
        echo "📤 Uploading to ${{ secrets.SERVER_IP }}..."
        scp -i ~/.ssh/deploy_key \
          -o ConnectTimeout=30 \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          deployment.tar.gz \
          ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/idiot-deployment.tar.gz
        
        echo "✅ Upload complete"
        
    - name: Deploy on server
      run: |
        echo "🚀 Deploying..."
        ssh -i ~/.ssh/deploy_key \
          -o ConnectTimeout=30 \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
          
          set -e  # Exit on any error
          
          echo "💾 Backing up current site..."
          if [ -d "/var/www/html" ]; then
            sudo cp -r /var/www/html /var/www/html.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
          fi
          
          echo "📂 Extracting files..."
          cd /var/www/html
          sudo tar -xzf /tmp/idiot-deployment.tar.gz
          
          echo "📁 Setting up directories..."
          sudo mkdir -p /var/www/html/assets/docs/
          sudo mkdir -p /var/www/html/docs/
          
          echo "🔒 Setting permissions..."
          sudo chown -R www-data:www-data /var/www/html
          sudo chmod -R 755 /var/www/html
          sudo find /var/www/html -type f -exec chmod 644 {} \;
          
          echo "🧹 Cleaning up..."
          rm -f /tmp/idiot-deployment.tar.gz
          
          echo "✅ Deployment complete!"
        ENDSSH
        
    - name: Cleanup
      if: always()
      run: |
        rm -f deployment.tar.gz
        rm -f ~/.ssh/deploy_key
        
    - name: Success
      run: |
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🎉 DEPLOYMENT SUCCESSFUL!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🌐 Website: https://stupidiots.com"
        echo "📊 Contract: 0xC29EF04CFFe38012dcfc1E96a2B368443f298dE1"
        echo "🔗 GitHub: https://github.com/tiptophimp/idiot-token"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

