name: 🚀 Deploy to stupidiots.com

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:  # Allow manual trigger from GitHub UI

env:
  DEPLOY_PATH: /var/www/html
  BACKUP_PATH: /var/www/backups

jobs:
  deploy:
    name: Deploy to Digital Ocean
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔍 Get commit info
        id: commit
        run: |
          echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
          echo "author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
      
      - name: 📦 Create deployment package
        run: |
          echo "Creating deployment package..."
          
          # Create deployment directory
          mkdir -p deploy
          
          # Copy all necessary files (exclude unnecessary items)
          rsync -av \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='*.log' \
            --exclude='*.tmp' \
            --exclude='secure/' \
            --exclude='*.tar.gz' \
            --exclude='*.zip' \
            --exclude='python-manager-25.0.msix' \
            --exclude='idiot_rebuild.py' \
            --exclude='stupidiots-website-clean/' \
            --exclude='DEPLOYMENT_FIX_GUIDE.md' \
            ./ deploy/
          
          # Create tarball
          cd deploy
          tar -czf ../deployment-${{ steps.commit.outputs.hash }}.tar.gz .
          cd ..
          
          echo "✅ Deployment package created: deployment-${{ steps.commit.outputs.hash }}.tar.gz"
          ls -lh deployment-${{ steps.commit.outputs.hash }}.tar.gz
      
      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          echo "✅ SSH configured"
      
      - name: 🔄 Backup current site
        run: |
          echo "Creating backup of current site..."
          ssh -i ~/.ssh/deploy_key root@${{ secrets.SERVER_IP }} << 'ENDSSH'
            # Create backup directory if it doesn't exist
            mkdir -p ${{ env.BACKUP_PATH }}
            
            # Create backup with timestamp
            BACKUP_FILE="${{ env.BACKUP_PATH }}/backup-$(date +%Y%m%d-%H%M%S).tar.gz"
            
            if [ -d "${{ env.DEPLOY_PATH }}" ]; then
              cd ${{ env.DEPLOY_PATH }}
              tar -czf "$BACKUP_FILE" .
              echo "✅ Backup created: $BACKUP_FILE"
              
              # Keep only last 5 backups
              cd ${{ env.BACKUP_PATH }}
              ls -t backup-*.tar.gz | tail -n +6 | xargs -r rm
              echo "✅ Old backups cleaned up"
            else
              echo "⚠️  No existing site to backup"
            fi
          ENDSSH
      
      - name: 📤 Upload deployment package
        run: |
          echo "Uploading deployment package to server..."
          scp -i ~/.ssh/deploy_key \
            deployment-${{ steps.commit.outputs.hash }}.tar.gz \
            root@${{ secrets.SERVER_IP }}:/tmp/
          echo "✅ Upload complete"
      
      - name: 🚀 Deploy on server
        run: |
          echo "Deploying on server..."
          ssh -i ~/.ssh/deploy_key root@${{ secrets.SERVER_IP }} << 'ENDSSH'
            set -e
            
            # Create deployment directory if it doesn't exist
            mkdir -p ${{ env.DEPLOY_PATH }}
            
            # Extract deployment package
            echo "📦 Extracting files..."
            cd ${{ env.DEPLOY_PATH }}
            tar -xzf /tmp/deployment-${{ steps.commit.outputs.hash }}.tar.gz
            
            # Set proper permissions
            echo "🔐 Setting permissions..."
            find ${{ env.DEPLOY_PATH }} -type d -exec chmod 755 {} \;
            find ${{ env.DEPLOY_PATH }} -type f -exec chmod 644 {} \;
            
            # Set specific permissions for directories
            chmod -R 755 ${{ env.DEPLOY_PATH }}/assets
            chmod -R 755 ${{ env.DEPLOY_PATH }}/airdrop
            
            # Restart web server (if needed)
            if systemctl is-active --quiet nginx; then
              echo "🔄 Reloading Nginx..."
              systemctl reload nginx
            fi
            
            # Clean up
            rm /tmp/deployment-${{ steps.commit.outputs.hash }}.tar.gz
            
            echo "✅ Deployment complete!"
          ENDSSH
      
      - name: 🏥 Health check
        run: |
          echo "Running health checks..."
          
          # Wait a moment for server to settle
          sleep 5
          
          # Check if main page loads
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_IP }})
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "✅ Health check passed! Site is responding (HTTP $HTTP_CODE)"
          else
            echo "⚠️  Warning: Site returned HTTP $HTTP_CODE"
            exit 1
          fi
          
          # Check if critical files exist
          echo "Checking critical resources..."
          curl -f http://${{ secrets.SERVER_IP }}/assets/img/logo.png > /dev/null 2>&1 && echo "✅ Logo found" || echo "⚠️  Logo missing"
          curl -f http://${{ secrets.SERVER_IP }}/airdrop/ > /dev/null 2>&1 && echo "✅ Airdrop page found" || echo "⚠️  Airdrop page missing"
      
      - name: 📊 Deployment summary
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 DEPLOYMENT SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📝 Commit: ${{ steps.commit.outputs.hash }}"
          echo "💬 Message: ${{ steps.commit.outputs.message }}"
          echo "👤 Author: ${{ steps.commit.outputs.author }}"
          echo "📅 Date: ${{ steps.commit.outputs.date }}"
          echo "🌐 Website: https://stupidiots.com"
          echo "🔗 IP: http://${{ secrets.SERVER_IP }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -rf deploy/
          rm -f deployment-*.tar.gz
          rm -f ~/.ssh/deploy_key

  notify:
    name: Send notification
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📢 Deployment notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment succeeded!"
            echo "🌐 stupidiots.com has been updated"
          else
            echo "❌ Deployment failed!"
            echo "Check the logs above for details"
            exit 1
          fi

