name: Deploy to Hostinger

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm install
          fi

      - name: Create deployment package
        run: |
          # Use the cleaned deployment files
          if [ -d "cleaned_deployment" ]; then
            cd cleaned_deployment
            zip -r ../deploy-package.zip . -x "*.git*" "*.DS_Store" "Thumbs.db"
          elif [ -d "01_LIVE_SITE/main_site" ]; then
            cd 01_LIVE_SITE/main_site
            zip -r ../../deploy-package.zip . -x "*.git*" "*.DS_Store" "Thumbs.db"
          else
            # Fallback to public_html if it exists
            if [ -d "public_html" ]; then
              cd public_html
              zip -r ../deploy-package.zip . -x "*.git*" "*.DS_Store" "Thumbs.db"
            else
              echo "No deployment directory found!"
              exit 1
            fi
          fi

      - name: Extract deployment package
        run: |
          unzip deploy-package.zip -d ./deploy-files/

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/hostinger_key
          chmod 600 ~/.ssh/hostinger_key
          ssh-keyscan -H -p 65002 ${{ secrets.HOSTINGER_SSH_HOST }} >> ~/.ssh/known_hosts
          # Test SSH connection
          ssh -o StrictHostKeyChecking=no -p 65002 -i ~/.ssh/hostinger_key ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_SSH_HOST }} "echo 'SSH connection test successful'"

      - name: Deploy via SFTP/SSH
        run: |
          # Install rsync
          echo "Installing rsync..."
          sudo apt-get update && sudo apt-get install -y rsync
          
          # Test rsync availability
          echo "Testing rsync availability..."
          which rsync || echo "rsync not found"
          rsync --version || echo "rsync version check failed"
          
          # Deploy files using rsync
          echo "Starting deployment with rsync..."
          if rsync -avz --delete -e "ssh -p 65002 -i ~/.ssh/hostinger_key -o StrictHostKeyChecking=no" ./deploy-files/ ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_SSH_HOST }}:/home/u939125353/domains/stupidiots.com/public_html/; then
            echo "‚úÖ rsync deployment successful"
          else
            echo "‚ùå rsync deployment failed, trying alternative method..."
            # Alternative: Use scp for each file
            echo "Using SCP as fallback..."
            find ./deploy-files -type f -exec scp -P 65002 -i ~/.ssh/hostinger_key -o StrictHostKeyChecking=no {} ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_SSH_HOST }}:/home/u939125353/domains/stupidiots.com/public_html/ \;
          fi
          
          # Verify deployment
          echo "Verifying deployment..."
          ssh -p 65002 -i ~/.ssh/hostinger_key -o StrictHostKeyChecking=no ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_SSH_HOST }} "ls -la /home/u939125353/domains/stupidiots.com/public_html/index.html"

      - name: Upload deployment package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: stupidiots-deploy-${{ github.run_number }}
          path: deploy-package.zip
          retention-days: 30

      - name: Deployment Status
        run: |
          echo "üöÄ Deployment completed!"
          echo "üì¶ Package: deploy-package.zip"
          echo "üåê Site: https://stupidiots.com"
          echo "üìä Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

