name: Deploy IDIOT Token Website

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify secrets are set
      run: |
        if [ -z "${{ secrets.IDIOT_SSH_PRIVATE_KEY }}" ]; then
          echo "❌ ERROR: IDIOT_SSH_PRIVATE_KEY secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_IP }}" ]; then
          echo "❌ ERROR: SERVER_IP secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_USER }}" ]; then
          echo "❌ ERROR: SERVER_USER secret is not set!"
          exit 1
        fi
        echo "✅ All secrets are configured!"
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.IDIOT_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        
    - name: Test SSH connection
      run: |
        ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo 'SSH connection successful!'"
        
    - name: Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        tar -czf deployment.tar.gz \
          --exclude='.git' \
          --exclude='*.log' \
          --exclude='node_modules' \
          --exclude='secure' \
          --exclude='*.pem' \
          --exclude='*password*' \
          --exclude='*.csv' \
          --exclude='*.xlsx' \
          --exclude='audit-log.zip' \
          .
        echo "✅ Package created: $(ls -lh deployment.tar.gz)"
        
    - name: Upload to server
      run: |
        echo "📤 Uploading to server..."
        scp -i ~/.ssh/deploy_key -o ConnectTimeout=10 deployment.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/
        echo "✅ Upload complete!"
        
    - name: Deploy on server
      run: |
        echo "🔧 Deploying on server..."
        ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
          set -e
          
          # Backup
          if [ -d "/var/www/html" ]; then
            echo "💾 Creating backup..."
            sudo cp -r /var/www/html /var/www/html.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
          fi
          
          # Extract
          echo "📂 Extracting files..."
          cd /var/www/html
          sudo tar -xzf /tmp/deployment.tar.gz
          
          # Setup directories
          echo "📁 Creating directories..."
          sudo mkdir -p /var/www/html/assets/docs/
          sudo mkdir -p /var/www/html/docs/
          
          # Set permissions
          echo "🔒 Setting permissions..."
          sudo chown -R www-data:www-data /var/www/html
          sudo chmod -R 755 /var/www/html
          sudo find /var/www/html -type f -exec chmod 644 {} \;
          
          # Cleanup
          rm -f /tmp/deployment.tar.gz
          
          echo "✅ Deployment complete!"
        ENDSSH
        
    - name: Cleanup
      run: rm -f deployment.tar.gz
        
    - name: Deployment successful
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🎉 DEPLOYMENT SUCCESSFUL!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🌐 Website: https://stupidiots.com"
        echo "📊 Contract: 0xC29EF04CFFe38012dcfc1E96a2B368443f298dE1"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
